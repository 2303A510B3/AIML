{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOlR+ZGkUWGokVenYiPmiKZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A510B3/AIML/blob/main/Assignment%202%20BFS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0JnJqERehOhk",
        "outputId": "6fff68f5-96b2-4dc0-b95b-dd02c2ff90be"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'nbformat': 4,\n",
              " 'nbformat_minor': 0,\n",
              " 'metadata': {'colab': {'provenance': [],\n",
              "   'authorship_tag': 'ABX9TyMR6otu+o7e1ODIuJ91mxht'},\n",
              "  'kernelspec': {'name': 'python3', 'display_name': 'Python 3'},\n",
              "  'language_info': {'name': 'python'}},\n",
              " 'cells': [{'cell_type': 'markdown',\n",
              "   'metadata': {'id': 'view-in-github', 'colab_type': 'text'},\n",
              "   'source': ['<a href=\"https://colab.research.google.com/github/2303A510B3/2303A510B3/blob/main/Assignment%202%20BFS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>']},\n",
              "  {'cell_type': 'code',\n",
              "   'execution_count': 4,\n",
              "   'metadata': {'colab': {'base_uri': 'https://localhost:8080/'},\n",
              "    'id': 'XlDydpJmLj5N',\n",
              "    'outputId': '7b5af79a-6451-474e-b4e7-0a672de87764'},\n",
              "   'outputs': [{'output_type': 'execute_result',\n",
              "     'data': {'text/plain': [\"{'nbformat': 4,\\n\",\n",
              "       \" 'nbformat_minor': 0,\\n\",\n",
              "       \" 'metadata': {'colab': {'provenance': [],\\n\",\n",
              "       \"   'authorship_tag': 'ABX9TyNboRevfQAO6ai8sRoFXRDi'},\\n\",\n",
              "       \"  'kernelspec': {'name': 'python3', 'display_name': 'Python 3'},\\n\",\n",
              "       \"  'language_info': {'name': 'python'}},\\n\",\n",
              "       \" 'cells': [{'cell_type': 'markdown',\\n\",\n",
              "       \"   'metadata': {'id': 'view-in-github', 'colab_type': 'text'},\\n\",\n",
              "       '   \\'source\\': [\\'<a href=\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/Ass-2%20BFS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\\']},\\n',\n",
              "       \"  {'cell_type': 'code',\\n\",\n",
              "       \"   'execution_count': 1,\\n\",\n",
              "       \"   'metadata': {'colab': {'base_uri': 'https://localhost:8080/'},\\n\",\n",
              "       \"    'id': '8ZIiVIVCR4cO',\\n\",\n",
              "       \"    'outputId': 'ba48cb5e-9759-410c-8a60-d0f02a34578b'},\\n\",\n",
              "       \"   'outputs': [{'output_type': 'stream',\\n\",\n",
              "       \"     'name': 'stdout',\\n\",\n",
              "       \"     'text': ['The adjacency List representing the graph is:\\\\n',\\n\",\n",
              "       \"      '{0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2]}\\\\n',\\n\",\n",
              "       \"      'BFS traversal of graph with source 0 is:\\\\n',\\n\",\n",
              "       \"      '0-->1-->3-->2-->4-->5-->']}],\\n\",\n",
              "       \"   'source': ['#Implement Breadth First Search Algorithm using a Queue.\\\\n',\\n\",\n",
              "       \"    '\\\\n',\\n\",\n",
              "       \"    '\\\\n',\\n\",\n",
              "       \"    'from queue import Queue\\\\n',\\n\",\n",
              "       \"    '\\\\n',\\n\",\n",
              "       \"    'graph = {0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2],}\\\\n',\\n\",\n",
              "       '    \\'print(\"The adjacency List representing the graph is:\")\\\\n\\',\\n',\n",
              "       \"    'print(graph)\\\\n',\\n\",\n",
              "       \"    '\\\\n',\\n\",\n",
              "       \"    '\\\\n',\\n\",\n",
              "       \"    'def bfs(graph, source):\\\\n',\\n\",\n",
              "       \"    '    Q = Queue()\\\\n',\\n\",\n",
              "       \"    '    visited_vertices = set()\\\\n',\\n\",\n",
              "       \"    '    Q.put(source)\\\\n',\\n\",\n",
              "       \"    '    visited_vertices.update({0})\\\\n',\\n\",\n",
              "       \"    '    while not Q.empty():\\\\n',\\n\",\n",
              "       \"    '        vertex = Q.get()\\\\n',\\n\",\n",
              "       '    \\'        print(vertex, end=\"-->\")\\\\n\\',\\n',\n",
              "       \"    '        for u in graph[vertex]:\\\\n',\\n\",\n",
              "       \"    '            if u not in visited_vertices:\\\\n',\\n\",\n",
              "       \"    '                Q.put(u)\\\\n',\\n\",\n",
              "       \"    '                visited_vertices.update({u})\\\\n',\\n\",\n",
              "       \"    '\\\\n',\\n\",\n",
              "       '    \\'print(\"BFS traversal of graph with source 0 is:\")\\\\n\\',\\n',\n",
              "       \"    'bfs(graph, 0)']}]}\"]},\n",
              "     'metadata': {},\n",
              "     'execution_count': 4}],\n",
              "   'source': ['{\\n',\n",
              "    '  \"nbformat\": 4,\\n',\n",
              "    '  \"nbformat_minor\": 0,\\n',\n",
              "    '  \"metadata\": {\\n',\n",
              "    '    \"colab\": {\\n',\n",
              "    '      \"provenance\": [],\\n',\n",
              "    '      \"authorship_tag\": \"ABX9TyNboRevfQAO6ai8sRoFXRDi\",\\n',\n",
              "    '\\n',\n",
              "    '    },\\n',\n",
              "    '    \"kernelspec\": {\\n',\n",
              "    '      \"name\": \"python3\",\\n',\n",
              "    '      \"display_name\": \"Python 3\"\\n',\n",
              "    '    },\\n',\n",
              "    '    \"language_info\": {\\n',\n",
              "    '      \"name\": \"python\"\\n',\n",
              "    '    }\\n',\n",
              "    '  },\\n',\n",
              "    '  \"cells\": [\\n',\n",
              "    '    {\\n',\n",
              "    '      \"cell_type\": \"markdown\",\\n',\n",
              "    '      \"metadata\": {\\n',\n",
              "    '        \"id\": \"view-in-github\",\\n',\n",
              "    '        \"colab_type\": \"text\"\\n',\n",
              "    '      },\\n',\n",
              "    '      \"source\": [\\n',\n",
              "    '        \"<a href=\\\\\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/Ass-2%20BFS\\\\\" target=\\\\\"_parent\\\\\"><img src=\\\\\"https://colab.research.google.com/assets/colab-badge.svg\\\\\" alt=\\\\\"Open In Colab\\\\\"/></a>\"\\n',\n",
              "    '      ]\\n',\n",
              "    '    },\\n',\n",
              "    '    {\\n',\n",
              "    '      \"cell_type\": \"code\",\\n',\n",
              "    '      \"execution_count\": 1,\\n',\n",
              "    '      \"metadata\": {\\n',\n",
              "    '        \"colab\": {\\n',\n",
              "    '          \"base_uri\": \"https://localhost:8080/\"\\n',\n",
              "    '        },\\n',\n",
              "    '        \"id\": \"8ZIiVIVCR4cO\",\\n',\n",
              "    '        \"outputId\": \"ba48cb5e-9759-410c-8a60-d0f02a34578b\"\\n',\n",
              "    '      },\\n',\n",
              "    '      \"outputs\": [\\n',\n",
              "    '        {\\n',\n",
              "    '          \"output_type\": \"stream\",\\n',\n",
              "    '          \"name\": \"stdout\",\\n',\n",
              "    '          \"text\": [\\n',\n",
              "    '            \"The adjacency List representing the graph is:\\\\n\",\\n',\n",
              "    '            \"{0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2]}\\\\n\",\\n',\n",
              "    '            \"BFS traversal of graph with source 0 is:\\\\n\",\\n',\n",
              "    '            \"0-->1-->3-->2-->4-->5-->\"\\n',\n",
              "    '          ]\\n',\n",
              "    '        }\\n',\n",
              "    '      ],\\n',\n",
              "    '      \"source\": [\\n',\n",
              "    '        \"#Implement Breadth First Search Algorithm using a Queue.\\\\n\",\\n',\n",
              "    '        \"\\\\n\",\\n',\n",
              "    '        \"\\\\n\",\\n',\n",
              "    '        \"from queue import Queue\\\\n\",\\n',\n",
              "    '        \"\\\\n\",\\n',\n",
              "    '        \"graph = {0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2],}\\\\n\",\\n',\n",
              "    '        \"print(\\\\\"The adjacency List representing the graph is:\\\\\")\\\\n\",\\n',\n",
              "    '        \"print(graph)\\\\n\",\\n',\n",
              "    '        \"\\\\n\",\\n',\n",
              "    '        \"\\\\n\",\\n',\n",
              "    '        \"def bfs(graph, source):\\\\n\",\\n',\n",
              "    '        \"    Q = Queue()\\\\n\",\\n',\n",
              "    '        \"    visited_vertices = set()\\\\n\",\\n',\n",
              "    '        \"    Q.put(source)\\\\n\",\\n',\n",
              "    '        \"    visited_vertices.update({0})\\\\n\",\\n',\n",
              "    '        \"    while not Q.empty():\\\\n\",\\n',\n",
              "    '        \"        vertex = Q.get()\\\\n\",\\n',\n",
              "    '        \"        print(vertex, end=\\\\\"-->\\\\\")\\\\n\",\\n',\n",
              "    '        \"        for u in graph[vertex]:\\\\n\",\\n',\n",
              "    '        \"            if u not in visited_vertices:\\\\n\",\\n',\n",
              "    '        \"                Q.put(u)\\\\n\",\\n',\n",
              "    '        \"                visited_vertices.update({u})\\\\n\",\\n',\n",
              "    '        \"\\\\n\",\\n',\n",
              "    '        \"print(\\\\\"BFS traversal of graph with source 0 is:\\\\\")\\\\n\",\\n',\n",
              "    '        \"bfs(graph, 0)\"\\n',\n",
              "    '      ]\\n',\n",
              "    '    }\\n',\n",
              "    '  ]\\n',\n",
              "    '}']}]}"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "{\n",
        "  \"nbformat\": 4,\n",
        "  \"nbformat_minor\": 0,\n",
        "  \"metadata\": {\n",
        "    \"colab\": {\n",
        "      \"provenance\": [],\n",
        "      \"authorship_tag\": \"ABX9TyMR6otu+o7e1ODIuJ91mxht\",\n",
        "\n",
        "    },\n",
        "    \"kernelspec\": {\n",
        "      \"name\": \"python3\",\n",
        "      \"display_name\": \"Python 3\"\n",
        "    },\n",
        "    \"language_info\": {\n",
        "      \"name\": \"python\"\n",
        "    }\n",
        "  },\n",
        "  \"cells\": [\n",
        "    {\n",
        "      \"cell_type\": \"markdown\",\n",
        "      \"metadata\": {\n",
        "        \"id\": \"view-in-github\",\n",
        "        \"colab_type\": \"text\"\n",
        "      },\n",
        "      \"source\": [\n",
        "        \"<a href=\\\"https://colab.research.google.com/github/2303A510B3/2303A510B3/blob/main/Assignment%202%20BFS\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n",
        "      ]\n",
        "    },\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"execution_count\": 4,\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\"\n",
        "        },\n",
        "        \"id\": \"XlDydpJmLj5N\",\n",
        "        \"outputId\": \"7b5af79a-6451-474e-b4e7-0a672de87764\"\n",
        "      },\n",
        "      \"outputs\": [\n",
        "        {\n",
        "          \"output_type\": \"execute_result\",\n",
        "          \"data\": {\n",
        "            \"text/plain\": [\n",
        "              \"{'nbformat': 4,\\n\",\n",
        "              \" 'nbformat_minor': 0,\\n\",\n",
        "              \" 'metadata': {'colab': {'provenance': [],\\n\",\n",
        "              \"   'authorship_tag': 'ABX9TyNboRevfQAO6ai8sRoFXRDi'},\\n\",\n",
        "              \"  'kernelspec': {'name': 'python3', 'display_name': 'Python 3'},\\n\",\n",
        "              \"  'language_info': {'name': 'python'}},\\n\",\n",
        "              \" 'cells': [{'cell_type': 'markdown',\\n\",\n",
        "              \"   'metadata': {'id': 'view-in-github', 'colab_type': 'text'},\\n\",\n",
        "              \"   'source': ['<a href=\\\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/Ass-2%20BFS\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>']},\\n\",\n",
        "              \"  {'cell_type': 'code',\\n\",\n",
        "              \"   'execution_count': 1,\\n\",\n",
        "              \"   'metadata': {'colab': {'base_uri': 'https://localhost:8080/'},\\n\",\n",
        "              \"    'id': '8ZIiVIVCR4cO',\\n\",\n",
        "              \"    'outputId': 'ba48cb5e-9759-410c-8a60-d0f02a34578b'},\\n\",\n",
        "              \"   'outputs': [{'output_type': 'stream',\\n\",\n",
        "              \"     'name': 'stdout',\\n\",\n",
        "              \"     'text': ['The adjacency List representing the graph is:\\\\n',\\n\",\n",
        "              \"      '{0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2]}\\\\n',\\n\",\n",
        "              \"      'BFS traversal of graph with source 0 is:\\\\n',\\n\",\n",
        "              \"      '0-->1-->3-->2-->4-->5-->']}],\\n\",\n",
        "              \"   'source': ['#Implement Breadth First Search Algorithm using a Queue.\\\\n',\\n\",\n",
        "              \"    '\\\\n',\\n\",\n",
        "              \"    '\\\\n',\\n\",\n",
        "              \"    'from queue import Queue\\\\n',\\n\",\n",
        "              \"    '\\\\n',\\n\",\n",
        "              \"    'graph = {0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2],}\\\\n',\\n\",\n",
        "              \"    'print(\\\"The adjacency List representing the graph is:\\\")\\\\n',\\n\",\n",
        "              \"    'print(graph)\\\\n',\\n\",\n",
        "              \"    '\\\\n',\\n\",\n",
        "              \"    '\\\\n',\\n\",\n",
        "              \"    'def bfs(graph, source):\\\\n',\\n\",\n",
        "              \"    '    Q = Queue()\\\\n',\\n\",\n",
        "              \"    '    visited_vertices = set()\\\\n',\\n\",\n",
        "              \"    '    Q.put(source)\\\\n',\\n\",\n",
        "              \"    '    visited_vertices.update({0})\\\\n',\\n\",\n",
        "              \"    '    while not Q.empty():\\\\n',\\n\",\n",
        "              \"    '        vertex = Q.get()\\\\n',\\n\",\n",
        "              \"    '        print(vertex, end=\\\"-->\\\")\\\\n',\\n\",\n",
        "              \"    '        for u in graph[vertex]:\\\\n',\\n\",\n",
        "              \"    '            if u not in visited_vertices:\\\\n',\\n\",\n",
        "              \"    '                Q.put(u)\\\\n',\\n\",\n",
        "              \"    '                visited_vertices.update({u})\\\\n',\\n\",\n",
        "              \"    '\\\\n',\\n\",\n",
        "              \"    'print(\\\"BFS traversal of graph with source 0 is:\\\")\\\\n',\\n\",\n",
        "              \"    'bfs(graph, 0)']}]}\"\n",
        "            ]\n",
        "          },\n",
        "          \"metadata\": {},\n",
        "          \"execution_count\": 4\n",
        "        }\n",
        "      ],\n",
        "      \"source\": [\n",
        "        \"{\\n\",\n",
        "        \"  \\\"nbformat\\\": 4,\\n\",\n",
        "        \"  \\\"nbformat_minor\\\": 0,\\n\",\n",
        "        \"  \\\"metadata\\\": {\\n\",\n",
        "        \"    \\\"colab\\\": {\\n\",\n",
        "        \"      \\\"provenance\\\": [],\\n\",\n",
        "        \"      \\\"authorship_tag\\\": \\\"ABX9TyNboRevfQAO6ai8sRoFXRDi\\\",\\n\",\n",
        "        \"\\n\",\n",
        "        \"    },\\n\",\n",
        "        \"    \\\"kernelspec\\\": {\\n\",\n",
        "        \"      \\\"name\\\": \\\"python3\\\",\\n\",\n",
        "        \"      \\\"display_name\\\": \\\"Python 3\\\"\\n\",\n",
        "        \"    },\\n\",\n",
        "        \"    \\\"language_info\\\": {\\n\",\n",
        "        \"      \\\"name\\\": \\\"python\\\"\\n\",\n",
        "        \"    }\\n\",\n",
        "        \"  },\\n\",\n",
        "        \"  \\\"cells\\\": [\\n\",\n",
        "        \"    {\\n\",\n",
        "        \"      \\\"cell_type\\\": \\\"markdown\\\",\\n\",\n",
        "        \"      \\\"metadata\\\": {\\n\",\n",
        "        \"        \\\"id\\\": \\\"view-in-github\\\",\\n\",\n",
        "        \"        \\\"colab_type\\\": \\\"text\\\"\\n\",\n",
        "        \"      },\\n\",\n",
        "        \"      \\\"source\\\": [\\n\",\n",
        "        \"        \\\"<a href=\\\\\\\"https://colab.research.google.com/github/2303a51840/2303a51840/blob/main/Ass-2%20BFS\\\\\\\" target=\\\\\\\"_parent\\\\\\\"><img src=\\\\\\\"https://colab.research.google.com/assets/colab-badge.svg\\\\\\\" alt=\\\\\\\"Open In Colab\\\\\\\"/></a>\\\"\\n\",\n",
        "        \"      ]\\n\",\n",
        "        \"    },\\n\",\n",
        "        \"    {\\n\",\n",
        "        \"      \\\"cell_type\\\": \\\"code\\\",\\n\",\n",
        "        \"      \\\"execution_count\\\": 1,\\n\",\n",
        "        \"      \\\"metadata\\\": {\\n\",\n",
        "        \"        \\\"colab\\\": {\\n\",\n",
        "        \"          \\\"base_uri\\\": \\\"https://localhost:8080/\\\"\\n\",\n",
        "        \"        },\\n\",\n",
        "        \"        \\\"id\\\": \\\"8ZIiVIVCR4cO\\\",\\n\",\n",
        "        \"        \\\"outputId\\\": \\\"ba48cb5e-9759-410c-8a60-d0f02a34578b\\\"\\n\",\n",
        "        \"      },\\n\",\n",
        "        \"      \\\"outputs\\\": [\\n\",\n",
        "        \"        {\\n\",\n",
        "        \"          \\\"output_type\\\": \\\"stream\\\",\\n\",\n",
        "        \"          \\\"name\\\": \\\"stdout\\\",\\n\",\n",
        "        \"          \\\"text\\\": [\\n\",\n",
        "        \"            \\\"The adjacency List representing the graph is:\\\\n\\\",\\n\",\n",
        "        \"            \\\"{0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2]}\\\\n\\\",\\n\",\n",
        "        \"            \\\"BFS traversal of graph with source 0 is:\\\\n\\\",\\n\",\n",
        "        \"            \\\"0-->1-->3-->2-->4-->5-->\\\"\\n\",\n",
        "        \"          ]\\n\",\n",
        "        \"        }\\n\",\n",
        "        \"      ],\\n\",\n",
        "        \"      \\\"source\\\": [\\n\",\n",
        "        \"        \\\"#Implement Breadth First Search Algorithm using a Queue.\\\\n\\\",\\n\",\n",
        "        \"        \\\"\\\\n\\\",\\n\",\n",
        "        \"        \\\"\\\\n\\\",\\n\",\n",
        "        \"        \\\"from queue import Queue\\\\n\\\",\\n\",\n",
        "        \"        \\\"\\\\n\\\",\\n\",\n",
        "        \"        \\\"graph = {0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2],}\\\\n\\\",\\n\",\n",
        "        \"        \\\"print(\\\\\\\"The adjacency List representing the graph is:\\\\\\\")\\\\n\\\",\\n\",\n",
        "        \"        \\\"print(graph)\\\\n\\\",\\n\",\n",
        "        \"        \\\"\\\\n\\\",\\n\",\n",
        "        \"        \\\"\\\\n\\\",\\n\",\n",
        "        \"        \\\"def bfs(graph, source):\\\\n\\\",\\n\",\n",
        "        \"        \\\"    Q = Queue()\\\\n\\\",\\n\",\n",
        "        \"        \\\"    visited_vertices = set()\\\\n\\\",\\n\",\n",
        "        \"        \\\"    Q.put(source)\\\\n\\\",\\n\",\n",
        "        \"        \\\"    visited_vertices.update({0})\\\\n\\\",\\n\",\n",
        "        \"        \\\"    while not Q.empty():\\\\n\\\",\\n\",\n",
        "        \"        \\\"        vertex = Q.get()\\\\n\\\",\\n\",\n",
        "        \"        \\\"        print(vertex, end=\\\\\\\"-->\\\\\\\")\\\\n\\\",\\n\",\n",
        "        \"        \\\"        for u in graph[vertex]:\\\\n\\\",\\n\",\n",
        "        \"        \\\"            if u not in visited_vertices:\\\\n\\\",\\n\",\n",
        "        \"        \\\"                Q.put(u)\\\\n\\\",\\n\",\n",
        "        \"        \\\"                visited_vertices.update({u})\\\\n\\\",\\n\",\n",
        "        \"        \\\"\\\\n\\\",\\n\",\n",
        "        \"        \\\"print(\\\\\\\"BFS traversal of graph with source 0 is:\\\\\\\")\\\\n\\\",\\n\",\n",
        "        \"        \\\"bfs(graph, 0)\\\"\\n\",\n",
        "        \"      ]\\n\",\n",
        "        \"    }\\n\",\n",
        "        \"  ]\\n\",\n",
        "        \"}\"\n",
        "      ]\n",
        "    }\n",
        "  ]\n",
        "}"
      ]
    }
  ]
}